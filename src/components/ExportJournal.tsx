import React, { useState } from 'react';
import { Download, Mail, FileText, Calendar, Filter, Check } from 'lucide-react';
import type { JournalEntry, Emotion, ReflectionEntry } from '../App';

interface ExportJournalProps {
  journalEntries: JournalEntry[];
  emotions: Emotion[];
  reflectionEntries: ReflectionEntry[];
}

type ExportFormat = 'text' | 'email' | 'pdf';
type DateRange = 'week' | 'month' | 'all';

export const ExportJournal: React.FC<ExportJournalProps> = ({
  journalEntries,
  emotions,
  reflectionEntries,
}) => {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('text');
  const [dateRange, setDateRange] = useState<DateRange>('month');
  const [includeEmotions, setIncludeEmotions] = useState(true);
  const [includeJournal, setIncludeJournal] = useState(true);
  const [includeReflections, setIncludeReflections] = useState(true);
  const [isExporting, setIsExporting] = useState(false);
  const [exportComplete, setExportComplete] = useState(false);

  const getDateRangeFilter = () => {
    const now = new Date();
    const ranges = {
      week: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),
      month: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000),
      all: new Date(0),
    };
    return ranges[dateRange];
  };

  const filterDataByDate = () => {
    const cutoffDate = getDateRangeFilter();
    
    return {
      emotions: emotions.filter(e => new Date(e.timestamp) >= cutoffDate),
      journalEntries: journalEntries.filter(e => new Date(e.timestamp) >= cutoffDate),
      reflectionEntries: reflectionEntries.filter(e => new Date(e.timestamp) >= cutoffDate),
    };
  };

  const generateTextContent = () => {
    const { emotions: filteredEmotions, journalEntries: filteredJournal, reflectionEntries: filteredReflections } = filterDataByDate();
    
    let content = `SOULFUL SPACE - EMOTIONAL JOURNEY EXPORT\n`;
    content += `Generated on: ${new Date().toLocaleDateString()}\n`;
    content += `Date Range: ${dateRange === 'all' ? 'All time' : `Last ${dateRange}`}\n`;
    content += `\n${'='.repeat(50)}\n\n`;

    if (includeEmotions && filteredEmotions.length > 0) {
      content += `EMOTIONS TRACKED (${filteredEmotions.length} entries)\n`;
      content += `${'='.repeat(30)}\n\n`;
      
      filteredEmotions.forEach(emotion => {
        content += `Date: ${new Date(emotion.timestamp).toLocaleDateString()}\n`;
        content += `Emotion: ${emotion.name}\n`;
        content += `Intensity: ${emotion.intensity}/10\n`;
        content += `Time: ${new Date(emotion.timestamp).toLocaleTimeString()}\n\n`;
      });
      content += `\n`;
    }

    if (includeJournal && filteredJournal.length > 0) {
      content += `JOURNAL ENTRIES (${filteredJournal.length} entries)\n`;
      content += `${'='.repeat(30)}\n\n`;
      
      filteredJournal.forEach(entry => {
        content += `Date: ${new Date(entry.timestamp).toLocaleDateString()}\n`;
        content += `Emotion Context: ${entry.emotion.name} (${entry.emotion.intensity}/10)\n`;
        content += `Entry:\n${entry.content}\n`;
        content += `\n${'-'.repeat(40)}\n\n`;
      });
    }

    if (includeReflections && filteredReflections.length > 0) {
      content += `DAILY REFLECTIONS (${filteredReflections.length} entries)\n`;
      content += `${'='.repeat(30)}\n\n`;
      
      filteredReflections.forEach(reflection => {
        content += `Date: ${new Date(reflection.date).toLocaleDateString()}\n`;
        content += `Mood: ${reflection.mood}/10\n\n`;
        
        if (reflection.gratitude) {
          content += `Gratitude:\n${reflection.gratitude}\n\n`;
        }
        if (reflection.challenge) {
          content += `Challenge:\n${reflection.challenge}\n\n`;
        }
        if (reflection.growth) {
          content += `Growth:\n${reflection.growth}\n\n`;
        }
        if (reflection.tomorrow) {
          content += `Tomorrow's Intention:\n${reflection.tomorrow}\n\n`;
        }
        content += `${'-'.repeat(40)}\n\n`;
      });
    }

    content += `\nThis export was generated by Soulful Space - Your Safe Haven for Emotions\n`;
    content += `Remember: Your emotional journey is unique and valuable. ðŸ’œ`;

    return content;
  };

  const handleExport = async () => {
    setIsExporting(true);
    
    // Simulate export processing
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const content = generateTextContent();
    
    if (selectedFormat === 'text') {
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `soulful-space-export-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } else if (selectedFormat === 'email') {
      const subject = encodeURIComponent('My Soulful Space Journal Export');
      const body = encodeURIComponent(content);
      window.open(`mailto:?subject=${subject}&body=${body}`);
    } else if (selectedFormat === 'pdf') {
      // For PDF, we'll create a formatted HTML version and suggest printing
      const htmlContent = content.replace(/\n/g, '<br>').replace(/=/g, '&#61;');
      const newWindow = window.open('', '_blank');
      if (newWindow) {
        newWindow.document.write(`
          <html>
            <head>
              <title>Soulful Space Export</title>
              <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
                h1 { color: #8B5CF6; }
                .content { white-space: pre-line; }
              </style>
            </head>
            <body>
              <div class="content">${htmlContent}</div>
              <script>window.print();</script>
            </body>
          </html>
        `);
        newWindow.document.close();
      }
    }
    
    setIsExporting(false);
    setExportComplete(true);
    setTimeout(() => setExportComplete(false), 3000);
  };

  const getDataSummary = () => {
    const { emotions: filteredEmotions, journalEntries: filteredJournal, reflectionEntries: filteredReflections } = filterDataByDate();
    
    let count = 0;
    if (includeEmotions) count += filteredEmotions.length;
    if (includeJournal) count += filteredJournal.length;
    if (includeReflections) count += filteredReflections.length;
    
    return count;
  };

  const formatOptions = [
    {
      id: 'text' as ExportFormat,
      name: 'Text File',
      description: 'Download as a .txt file',
      icon: FileText,
    },
    {
      id: 'email' as ExportFormat,
      name: 'Email',
      description: 'Send via email',
      icon: Mail,
    },
    {
      id: 'pdf' as ExportFormat,
      name: 'PDF Ready',
      description: 'Format for printing/PDF',
      icon: Download,
    },
  ];

  const dateRangeOptions = [
    { id: 'week' as DateRange, name: 'Last Week', description: 'Past 7 days' },
    { id: 'month' as DateRange, name: 'Last Month', description: 'Past 30 days' },
    { id: 'all' as DateRange, name: 'All Time', description: 'Everything' },
  ];

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      <div className="text-center mb-8">
        <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
          <Download className="w-8 h-8 text-white" />
        </div>
        <h2 className="text-3xl font-bold mb-4 text-gray-800 dark:text-white">
          Export Your Journey
        </h2>
        <p className="text-gray-600 dark:text-gray-300 text-lg max-w-2xl mx-auto">
          Create a comprehensive record of your emotional journey to share with your therapist, 
          keep for personal reflection, or backup your progress.
        </p>
      </div>

      {journalEntries.length === 0 && emotions.length === 0 && reflectionEntries.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-24 h-24 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 rounded-full flex items-center justify-center mx-auto mb-6">
            <FileText className="w-12 h-12 text-gray-400 dark:text-gray-500" />
          </div>
          <h3 className="text-xl font-semibold text-gray-600 dark:text-gray-300 mb-2">No Data to Export</h3>
          <p className="text-gray-500 dark:text-gray-400 mb-6">Start your emotional journey to have data available for export.</p>
        </div>
      ) : (
        <div className="space-y-8">
          {/* Export Format Selection */}
          <div className="bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-sm border border-gray-100 dark:border-gray-700">
            <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-6">Choose Export Format</h3>
            <div className="grid md:grid-cols-3 gap-4">
              {formatOptions.map((format) => (
                <button
                  key={format.id}
                  onClick={() => setSelectedFormat(format.id)}
                  className={`p-6 rounded-2xl border-2 transition-all duration-200 ${
                    selectedFormat === format.id
                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                      : 'border-gray-200 dark:border-gray-600 hover:border-purple-300 dark:hover:border-purple-600 hover:bg-purple-25 dark:hover:bg-purple-900/20'
                  }`}
                >
                  <format.icon className={`w-8 h-8 mx-auto mb-3 ${
                    selectedFormat === format.id ? 'text-purple-600 dark:text-purple-400' : 'text-gray-400 dark:text-gray-500'
                  }`} />
                  <h4 className={`font-semibold mb-2 ${
                    selectedFormat === format.id ? 'text-purple-800 dark:text-purple-300' : 'text-gray-800 dark:text-gray-200'
                  }`}>
                    {format.name}
                  </h4>
                  <p className={`text-sm ${
                    selectedFormat === format.id ? 'text-purple-600 dark:text-purple-400' : 'text-gray-600 dark:text-gray-400'
                  }`}>
                    {format.description}
                  </p>
                </button>
              ))}
            </div>
          </div>

          {/* Date Range Selection */}
          <div className="bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-sm border border-gray-100 dark:border-gray-700">
            <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-6">Select Date Range</h3>
            <div className="grid md:grid-cols-3 gap-4">
              {dateRangeOptions.map((range) => (
                <button
                  key={range.id}
                  onClick={() => setDateRange(range.id)}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                    dateRange === range.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/30'
                      : 'border-gray-200 dark:border-gray-600 hover:border-blue-300 dark:hover:border-blue-600'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <Calendar className={`w-5 h-5 ${
                      dateRange === range.id ? 'text-blue-600 dark:text-blue-400' : 'text-gray-400 dark:text-gray-500'
                    }`} />
                    <div className="text-left">
                      <h4 className={`font-semibold ${
                        dateRange === range.id ? 'text-blue-800 dark:text-blue-300' : 'text-gray-800 dark:text-gray-200'
                      }`}>
                        {range.name}
                      </h4>
                      <p className={`text-sm ${
                        dateRange === range.id ? 'text-blue-600 dark:text-blue-400' : 'text-gray-600 dark:text-gray-400'
                      }`}>
                        {range.description}
                      </p>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Content Selection */}
          <div className="bg-white dark:bg-gray-800 rounded-3xl p-8 shadow-sm border border-gray-100 dark:border-gray-700">
            <h3 className="text-xl font-semibold text-gray-800 dark:text-white mb-6">What to Include</h3>
            <div className="space-y-4">
              <label className="flex items-center space-x-3 p-4 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <input
                  type="checkbox"
                  checked={includeEmotions}
                  onChange={(e) => setIncludeEmotions(e.target.checked)}
                  className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500"
                />
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-800 dark:text-white">Emotion Tracking</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">All recorded emotions with intensity levels and timestamps</p>
                </div>
                <span className="text-purple-600 dark:text-purple-400 font-medium">{emotions.length} entries</span>
              </label>

              <label className="flex items-center space-x-3 p-4 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <input
                  type="checkbox"
                  checked={includeJournal}
                  onChange={(e) => setIncludeJournal(e.target.checked)}
                  className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500"
                />
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-800 dark:text-white">Journal Entries</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Your private thoughts and emotional expressions</p>
                </div>
                <span className="text-purple-600 dark:text-purple-400 font-medium">{journalEntries.length} entries</span>
              </label>

              <label className="flex items-center space-x-3 p-4 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <input
                  type="checkbox"
                  checked={includeReflections}
                  onChange={(e) => setIncludeReflections(e.target.checked)}
                  className="w-5 h-5 text-purple-600 rounded focus:ring-purple-500"
                />
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-800 dark:text-white">Daily Reflections</h4>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Structured daily reflections and mood tracking</p>
                </div>
                <span className="text-purple-600 dark:text-purple-400 font-medium">{reflectionEntries.length} entries</span>
              </label>
            </div>
          </div>

          {/* Export Summary & Action */}
          <div className="bg-gradient-to-br from-purple-50 to-indigo-50 dark:from-purple-900/30 dark:to-indigo-900/30 rounded-3xl p-8 border border-purple-100 dark:border-purple-700">
            <div className="text-center">
              <h3 className="text-xl font-semibold text-purple-800 dark:text-purple-300 mb-4">Export Summary</h3>
              <div className="grid md:grid-cols-3 gap-4 mb-6">
                <div className="bg-white dark:bg-gray-700 rounded-xl p-4">
                  <Filter className="w-6 h-6 text-purple-600 dark:text-purple-400 mx-auto mb-2" />
                  <p className="font-semibold text-gray-800 dark:text-white">{dateRange === 'all' ? 'All Time' : `Last ${dateRange}`}</p>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Date Range</p>
                </div>
                <div className="bg-white dark:bg-gray-700 rounded-xl p-4">
                  <FileText className="w-6 h-6 text-purple-600 dark:text-purple-400 mx-auto mb-2" />
                  <p className="font-semibold text-gray-800 dark:text-white">{getDataSummary()}</p>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Total Items</p>
                </div>
                <div className="bg-white dark:bg-gray-700 rounded-xl p-4">
                  <Download className="w-6 h-6 text-purple-600 dark:text-purple-400 mx-auto mb-2" />
                  <p className="font-semibold text-gray-800 dark:text-white">{formatOptions.find(f => f.id === selectedFormat)?.name}</p>
                  <p className="text-gray-600 dark:text-gray-300 text-sm">Format</p>
                </div>
              </div>

              <button
                onClick={handleExport}
                disabled={isExporting || getDataSummary() === 0}
                className={`flex items-center space-x-3 px-8 py-4 rounded-2xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 mx-auto ${
                  isExporting || getDataSummary() === 0
                    ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed'
                    : exportComplete
                    ? 'bg-green-500 text-white'
                    : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white'
                }`}
              >
                {exportComplete ? (
                  <>
                    <Check className="w-5 h-5" />
                    <span>Export Complete!</span>
                  </>
                ) : isExporting ? (
                  <>
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    <span>Preparing Export...</span>
                  </>
                ) : (
                  <>
                    <Download className="w-5 h-5" />
                    <span>Export My Journey</span>
                  </>
                )}
              </button>
            </div>
          </div>

          {/* Privacy Notice */}
          <div className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-100 dark:border-gray-700">
            <h4 className="font-semibold text-gray-800 dark:text-white mb-2 flex items-center space-x-2">
              <Check className="w-5 h-5 text-green-600 dark:text-green-400" />
              <span>Privacy & Security</span>
            </h4>
            <p className="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
              Your exported data remains completely private and under your control. We don't store or access your exported information. 
              When sharing with healthcare providers, ensure you're comfortable with the content and consider removing any sensitive details if needed.
            </p>
          </div>
        </div>
      )}
    </div>
  );
};